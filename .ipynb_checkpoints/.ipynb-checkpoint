{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "AI Running on cuda\n"
     ]
    }
   ],
   "source": [
    "offline = True\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n",
    "print(\"AI Running on\", device)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Define the Convolutional Neural Network\n",
    "\n",
    "After you've looked at the data you're working with and, in this case, know the shapes of the images and of the keypoints, you are ready to define a convolutional neural network that can *learn* from this data.\n",
    "\n",
    "In this notebook and in `models.py`, you will:\n",
    "1. Define a CNN with images as input and keypoints as output\n",
    "2. Construct the transformed FaceKeypointsDataset, just as before\n",
    "3. Train the CNN on the training data, tracking loss\n",
    "4. See how the trained model performs on test data\n",
    "5. If necessary, modify the CNN structure and model hyperparameters, so that it performs *well* **\\***\n",
    "\n",
    "**\\*** What does *well* mean?\n",
    "\n",
    "\"Well\" means that the model's loss decreases during training **and**, when applied to test image data, the model produces keypoints that closely match the true keypoints of each face. And you'll see examples of this later in the notebook.\n",
    "\n",
    "---\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## CNN Architecture\n",
    "\n",
    "Recall that CNN's are defined by a few types of layers:\n",
    "* Convolutional layers\n",
    "* Maxpooling layers\n",
    "* Fully-connected layers\n",
    "\n",
    "You are required to use the above layers and encouraged to add multiple convolutional layers and things like dropout layers that may prevent overfitting. You are also encouraged to look at literature on keypoint detection, such as [this paper](https://arxiv.org/pdf/1710.00977.pdf), to help you determine the structure of your network.\n",
    "\n",
    "\n",
    "### TODO: Define your model in the provided file `models.py` file\n",
    "\n",
    "This file is mostly empty but contains the expected name and some TODO's for creating your model.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PyTorch Neural Nets\n",
    "\n",
    "To define a neural network in PyTorch, you define the layers of a model in the function `__init__` and define the feedforward behavior of a network that employs those initialized layers in the function `forward`, which takes in an input image tensor, `x`. The structure of this Net class is shown below and left for you to fill in.\n",
    "\n",
    "Note: During training, PyTorch will be able to perform backpropagation by keeping track of the network's feedforward behavior and using autograd to calculate the update to the weights in the network.\n",
    "\n",
    "#### Define the Layers in ` __init__`\n",
    "As a reminder, a conv/pool layer may be defined like this (in `__init__`):\n",
    "```\n",
    "# 1 input image channel (for grayscale images), 32 output channels/feature maps, 3x3 square convolution kernel\n",
    "self.conv1 = nn.Conv2d(1, 32, 3)\n",
    "\n",
    "# maxpool that uses a square window of kernel_size=2, stride=2\n",
    "self.pool = nn.MaxPool2d(2, 2)      \n",
    "```\n",
    "\n",
    "#### Refer to Layers in `forward`\n",
    "Then referred to in the `forward` function like this, in which the conv1 layer has a ReLu activation applied to it before maxpooling is applied:\n",
    "```\n",
    "x = self.pool(F.relu(self.conv1(x)))\n",
    "```\n",
    "\n",
    "Best practice is to place any layers whose weights will change during the training process in `__init__` and refer to them in the `forward` function; any layers or functions that always behave in the same way, such as a pre-defined activation function, should appear *only* in the `forward` function."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Why models.py\n",
    "\n",
    "You are tasked with defining the network in the `models.py` file so that any models you define can be saved and loaded by name in different notebooks in this project directory. For example, by defining a CNN class called `Net` in `models.py`, you can then create that same architecture in this and other notebooks by simply importing the class and instantiating a model:\n",
    "```\n",
    "    from models import Net\n",
    "    net = Net()\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "if not offline:\n",
    "    #load the data if you need to; if you have already loaded the data, you may comment this cell out\n",
    "    #-- DO NOT CHANGE THIS CELL -- \n",
    "    !mkdir /data\n",
    "    !wget -P /data/ https://s3.amazonaws.com/video.udacity-data.com/topher/2018/May/5aea1b91_train-test-data/train-test-data.zip\n",
    "    !unzip -n /data/train-test-data.zip -d /data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<div class=\"alert alert-info\">**Note:** Workspaces automatically close connections after 30 minutes of inactivity (including inactivity while training!). Use the code snippet below to keep your workspace alive during training. (The active_session context manager is imported below.)\n",
    "</div>\n",
    "```\n",
    "from workspace_utils import active_session\n",
    "\n",
    "with active_session():\n",
    "    train_model(num_epochs)\n",
    "```\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import the usual resources\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "# import utilities to keep workspaces alive during model training\n",
    "# from workspace_utils import active_session\n",
    "\n",
    "# watch for any changes in model.py, if it changes, re-load it automatically\n",
    "# %load_ext autoreload\n",
    "# %autoreload 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\Users\\SanujaPC\\AppData\\Local\\conda\\conda\\envs\\ml-agents\\python.exe\n",
      "Net(\n",
      "  (conv1): Conv2d(1, 32, kernel_size=(4, 4), stride=(1, 1))\n",
      "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n",
      "  (conv3): Conv2d(64, 128, kernel_size=(2, 2), stride=(1, 1))\n",
      "  (conv4): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))\n",
      "  (fc1_drop): Dropout(p=0.3)\n",
      "  (conv1_bn): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (conv2_bn): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (conv3_bn): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (conv4_bn): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n",
      "  (fc1): Linear(in_features=43264, out_features=3000, bias=True)\n",
      "  (fc2): Linear(in_features=3000, out_features=136, bias=True)\n",
      ")\n"
     ]
    }
   ],
   "source": [
    "## TODO: Define the Net in models.py\n",
    "import  sys\n",
    "print(sys.executable)\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "\n",
    "## TODO: Once you've define the network, you can instantiate it\n",
    "# one example conv layer has been provided for you\n",
    "from models import Net\n",
    "\n",
    "net = Net().to(device)\n",
    "print(net)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "## Transform the dataset \n",
    "\n",
    "To prepare for training, create a transformed dataset of images and keypoints.\n",
    "\n",
    "### TODO: Define a data transform\n",
    "\n",
    "In PyTorch, a convolutional neural network expects a torch image of a consistent size as input. For efficient training, and so your model's loss does not blow up during training, it is also suggested that you normalize the input images and keypoints. The necessary transforms have been defined in `data_load.py` and you **do not** need to modify these; take a look at this file (you'll see the same transforms that were defined and applied in Notebook 1).\n",
    "\n",
    "To define the data transform below, use a [composition](http://pytorch.org/tutorials/beginner/data_loading_tutorial.html#compose-transforms) of:\n",
    "1. Rescaling and/or cropping the data, such that you are left with a square image (the suggested size is 224x224px)\n",
    "2. Normalizing the images and keypoints; turning each RGB image into a grayscale image with a color range of [0, 1] and transforming the given keypoints into a range of [-1, 1]\n",
    "3. Turning these images and keypoints into Tensors\n",
    "\n",
    "These transformations have been defined in `data_load.py`, but it's up to you to call them and create a `data_transform` below. **This transform will be applied to the training data and, later, the test data**. It will change how you go about displaying these images and keypoints, but these steps are essential for efficient training.\n",
    "\n",
    "As a note, should you want to perform data augmentation (which is optional in this project), and randomly rotate or shift these images, a square image size will be useful; rotating a 224x224 image by 90 degrees will result in the same shape of output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch.utils.data import Dataset, DataLoader\n",
    "from torchvision import transforms, utils\n",
    "\n",
    "# the dataset we created in Notebook 1 is copied in the helper file `data_load.py`\n",
    "from data_load import FacialKeypointsDataset\n",
    "# the transforms we defined in Notebook 1 are in the helper file `data_load.py`\n",
    "from data_load import Rescale, RandomCrop, Normalize, ToTensor\n",
    "\n",
    "\n",
    "## TODO: define the data_transform using transforms.Compose([all tx's, . , .])\n",
    "# order matters! i.e. rescaling should come before a smaller crop\n",
    "data_transform = transforms.Compose([Rescale(250), RandomCrop(224), Normalize(), ToTensor()])\n",
    "\n",
    "# testing that you've defined a transform\n",
    "assert(data_transform is not None), 'Define a data_transform'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of images:  3462\n",
      "0 torch.Size([1, 224, 224]) torch.Size([68, 2])\n",
      "1 torch.Size([1, 224, 224]) torch.Size([68, 2])\n",
      "2 torch.Size([1, 224, 224]) torch.Size([68, 2])\n",
      "3 torch.Size([1, 224, 224]) torch.Size([68, 2])\n"
     ]
    }
   ],
   "source": [
    "# create the transformed dataset\n",
    "if not offline:\n",
    "    transformed_dataset = FacialKeypointsDataset(csv_file='/data/training_frames_keypoints.csv',\n",
    "                                                 root_dir='/data/training/',\n",
    "                                                 transform=data_transform)\n",
    "else:\n",
    "    transformed_dataset = FacialKeypointsDataset(csv_file='data/training_frames_keypoints.csv',\n",
    "                                                 root_dir='data/training/',\n",
    "                                                 transform=data_transform)\n",
    "\n",
    "\n",
    "print('Number of images: ', len(transformed_dataset))\n",
    "\n",
    "# iterate through the transformed dataset and print some stats about the first few samples\n",
    "for i in range(4):\n",
    "    sample = transformed_dataset[i]\n",
    "    print(i, sample['image'].size(), sample['keypoints'].size())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Batching and loading data\n",
    "\n",
    "Next, having defined the transformed dataset, we can use PyTorch's DataLoader class to load the training data in batches of whatever size as well as to shuffle the data for training the model. You can read more about the parameters of the DataLoader, in [this documentation](http://pytorch.org/docs/master/data.html).\n",
    "\n",
    "#### Batch size\n",
    "Decide on a good batch size for training your model. Try both small and large batch sizes and note how the loss decreases as the model trains. Too large a batch size may cause your model to crash and/or run out of memory while training.\n",
    "\n",
    "**Note for Windows users**: Please change the `num_workers` to 0 or you may face some issues with your DataLoader failing."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load training data in batches\n",
    "batch_size = 10\n",
    "\n",
    "train_loader = DataLoader(transformed_dataset, \n",
    "                          batch_size=batch_size,\n",
    "                          shuffle=True, \n",
    "                          num_workers=4)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Before training\n",
    "\n",
    "Take a look at how this model performs before it trains. You should see that the keypoints it predicts start off in one spot and don't match the keypoints on a face at all! It's interesting to visualize this behavior so that you can compare it to the model after training and see how the model has improved.\n",
    "\n",
    "#### Load in the test dataset\n",
    "\n",
    "The test dataset is one that this model has *not* seen before, meaning it has not trained with these images. We'll load in this test data and before and after training, see how your model performs on this set!\n",
    "\n",
    "To visualize this test data, we have to go through some un-transformation steps to turn our images into python images from tensors and to turn our keypoints back into a recognizable range. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load in the test data, using the dataset class\n",
    "# AND apply the data_transform you defined above\n",
    "\n",
    "# create the test dataset\n",
    "if not offline:\n",
    "    test_dataset = FacialKeypointsDataset(csv_file='/data/test_frames_keypoints.csv',\n",
    "                                             root_dir='/data/test/',\n",
    "                                             transform=data_transform)\n",
    "else:\n",
    "    test_dataset = FacialKeypointsDataset(csv_file='data/test_frames_keypoints.csv',\n",
    "                                             root_dir='data/test/',\n",
    "                                             transform=data_transform)\n",
    "    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load test data in batches\n",
    "batch_size = 10\n",
    "\n",
    "test_loader = DataLoader(test_dataset, \n",
    "                          batch_size=batch_size,\n",
    "                          shuffle=True, \n",
    "                          num_workers=4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Apply the model on a test sample\n",
    "\n",
    "To test the model on a test sample of data, you have to follow these steps:\n",
    "1. Extract the image and ground truth keypoints from a sample\n",
    "2. Wrap the image in a Variable, so that the net can process it as input and track how it changes as the image moves through the network.\n",
    "3. Make sure the image is a FloatTensor, which the model expects.\n",
    "4. Forward pass the image through the net to get the predicted, output keypoints.\n",
    "\n",
    "This function test how the network performs on the first batch of test data. It returns the images, the transformed images, the predicted keypoints (produced by the model), and the ground truth keypoints."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [],
   "source": [
    "# test the model on a batch of test images\n",
    "\n",
    "def net_sample_output():\n",
    "    \n",
    "    # iterate through the test dataset\n",
    "    for i, sample in enumerate(test_loader):\n",
    "        \n",
    "        # get sample data: images and ground truth keypoints\n",
    "        images = sample['image']\n",
    "        key_pts = sample['keypoints']\n",
    "\n",
    "        # convert images to FloatTensors\n",
    "        images = images.type(torch.FloatTensor).to(device)\n",
    "\n",
    "        # forward pass to get net output\n",
    "        output_pts = net(images)\n",
    "        \n",
    "        # reshape to batch_size x 68 x 2 pts\n",
    "        output_pts = output_pts.view(output_pts.size()[0], 68, -1)\n",
    "        \n",
    "        # break after first image is tested\n",
    "        if i == 0:\n",
    "            return images, output_pts, key_pts\n",
    "            "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Debugging tips\n",
    "\n",
    "If you get a size or dimension error here, make sure that your network outputs the expected number of keypoints! Or if you get a Tensor type error, look into changing the above code that casts the data into float types: `images = images.type(torch.FloatTensor)`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "torch.Size([10, 1, 224, 224])\n",
      "torch.Size([10, 68, 2])\n",
      "torch.Size([10, 68, 2])\n"
     ]
    }
   ],
   "source": [
    "# call the above function\n",
    "# returns: test images, test predicted keypoints, test ground truth keypoints\n",
    "test_images, test_outputs, gt_pts = net_sample_output()\n",
    "\n",
    "# print out the dimensions of the data to see if they make sense\n",
    "print(test_images.data.size())\n",
    "print(test_outputs.data.size())\n",
    "print(gt_pts.size())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualize the predicted keypoints\n",
    "\n",
    "Once we've had the model produce some predicted output keypoints, we can visualize these points in a way that's similar to how we've displayed this data before, only this time, we have to \"un-transform\" the image/keypoint data to display it.\n",
    "\n",
    "Note that I've defined a *new* function, `show_all_keypoints` that displays a grayscale image, its predicted keypoints and its ground truth keypoints (if provided)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "def show_all_keypoints(image, predicted_key_pts, gt_pts=None):\n",
    "    \"\"\"Show image with predicted keypoints\"\"\"\n",
    "    # image is grayscale\n",
    "    plt.imshow(image, cmap='gray')\n",
    "    plt.scatter(predicted_key_pts[:, 0], predicted_key_pts[:, 1], s=20, marker='.', c='m')\n",
    "    # plot ground truth points as green pts\n",
    "    if gt_pts is not None:\n",
    "        plt.scatter(gt_pts[:, 0], gt_pts[:, 1], s=20, marker='.', c='g')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Un-transformation\n",
    "\n",
    "Next, you'll see a helper function. `visualize_output` that takes in a batch of images, predicted keypoints, and ground truth keypoints and displays a set of those images and their true/predicted keypoints.\n",
    "\n",
    "This function's main role is to take batches of image and keypoint data (the input and output of your CNN), and transform them into numpy images and un-normalized keypoints (x, y) for normal display. The un-transformation process turns keypoints and images into numpy arrays from Tensors *and* it undoes the keypoint normalization done in the Normalize() transform; it's assumed that you applied these transformations when you loaded your test data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# visualize the output\n",
    "# by default this shows a batch of 10 images\n",
    "def visualize_output(test_images, test_outputs, gt_pts=None, batch_size=10):\n",
    "\n",
    "    for i in range(batch_size):\n",
    "        plt.figure(figsize=(20,10))\n",
    "        ax = plt.subplot(1, batch_size, i+1)\n",
    "\n",
    "        # un-transform the image data\n",
    "        image = test_images[i].data   # get the image from it's Variable wrapper\n",
    "        image = image.cpu().numpy()   # convert to numpy array from a Tensor\n",
    "        image = np.transpose(image, (1, 2, 0))   # transpose to go from torch to numpy image\n",
    "\n",
    "        # un-transform the predicted key_pts data\n",
    "        predicted_key_pts = test_outputs[i].data\n",
    "        predicted_key_pts = predicted_key_pts.cpu().numpy()\n",
    "        # undo normalization of keypoints  \n",
    "        predicted_key_pts = predicted_key_pts*50.0+100\n",
    "        \n",
    "        # plot ground truth points for comparison, if they exist\n",
    "        ground_truth_pts = None\n",
    "        if gt_pts is not None:\n",
    "            ground_truth_pts = gt_pts[i]         \n",
    "            ground_truth_pts = ground_truth_pts*50.0+100\n",
    "        \n",
    "        # call show_all_keypoints\n",
    "        show_all_keypoints(np.squeeze(image), predicted_key_pts, ground_truth_pts)\n",
    "            \n",
    "        plt.axis('off')\n",
    "\n",
    "    plt.show()\n",
    "    \n",
    "# call it\n",
    "visualize_output(test_images, test_outputs, gt_pts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training\n",
    "\n",
    "#### Loss function\n",
    "Training a network to predict keypoints is different than training a network to predict a class; instead of outputting a distribution of classes and using cross entropy loss, you may want to choose a loss function that is suited for regression, which directly compares a predicted value and target value. Read about the various kinds of loss functions (like MSE or L1/SmoothL1 loss) in [this documentation](http://pytorch.org/docs/master/_modules/torch/nn/modules/loss.html).\n",
    "\n",
    "### TODO: Define the loss and optimization\n",
    "\n",
    "Next, you'll define how the model will train by deciding on the loss function and optimizer.\n",
    "\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "## TODO: Define the loss and optimization\n",
    "import torch.optim as optim\n",
    "\n",
    "criterion = nn.MSELoss()\n",
    "\n",
    "optimizer = optim.Adam(params = net.parameters(), lr = 0.001)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training and Initial Observation\n",
    "\n",
    "Now, you'll train on your batched training data from `train_loader` for a number of epochs. \n",
    "\n",
    "To quickly observe how your model is training and decide on whether or not you should modify it's structure or hyperparameters, you're encouraged to start off with just one or two epochs at first. As you train, note how your the model's loss behaves over time: does it decrease quickly at first and then slow down? Does it take a while to decrease in the first place? What happens if you change the batch size of your training data or modify your loss function? etc. \n",
    "\n",
    "Use these initial observations to make changes to your model and decide on the best architecture before you train for many epochs and create a final model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [],
   "source": [
    "def train_net(n_epochs):\n",
    "\n",
    "    # prepare the net for training\n",
    "    net.train()\n",
    "\n",
    "    for epoch in range(n_epochs):  # loop over the dataset multiple times\n",
    "        \n",
    "        running_loss = 0.0\n",
    "\n",
    "        # train on batches of data, assumes you already have train_loader\n",
    "        for batch_i, data in enumerate(train_loader):\n",
    "            # get the input images and their corresponding labels\n",
    "            images = data['image']\n",
    "            key_pts = data['keypoints']\n",
    "\n",
    "            # flatten pts\n",
    "            key_pts = key_pts.view(key_pts.size(0), -1)\n",
    "\n",
    "            # convert variables to floats for regression loss\n",
    "            key_pts = key_pts.type(torch.FloatTensor).to(device)\n",
    "            images = images.type(torch.FloatTensor).to(device)\n",
    "\n",
    "            # forward pass to get outputs\n",
    "            output_pts = net(images)\n",
    "\n",
    "            # calculate the loss between predicted and target keypoints\n",
    "            loss = criterion(output_pts, key_pts)\n",
    "\n",
    "            # zero the parameter (weight) gradients\n",
    "            optimizer.zero_grad()\n",
    "            \n",
    "            # backward pass to calculate the weight gradients\n",
    "            loss.backward()\n",
    "\n",
    "            # update the weights\n",
    "            optimizer.step()\n",
    "\n",
    "            # print loss statistics\n",
    "            running_loss += loss.item()\n",
    "            if batch_i % 10 == 9:    # print every 10 batches\n",
    "                print('Epoch: {}, Batch: {}, Avg. Loss: {}'.format(epoch + 1, batch_i+1, running_loss/10))\n",
    "                running_loss = 0.0\n",
    "\n",
    "    print('Finished Training')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 10, Avg. Loss: 1.0845351219177246\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 20, Avg. Loss: 0.6007837891578675\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 30, Avg. Loss: 0.526676332950592\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 40, Avg. Loss: 0.6471299380064011\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 50, Avg. Loss: 0.6548199683427811\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 60, Avg. Loss: 0.6205891966819763\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 70, Avg. Loss: 0.6001515030860901\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 80, Avg. Loss: 0.6103376835584641\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "Epoch: 1, Batch: 90, Avg. Loss: 0.6259788870811462\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n",
      "CONV 1 torch.Size([10, 32, 221, 221])\n",
      "MAX POOL 1 torch.Size([10, 32, 110, 110])\n",
      "CONV 2 torch.Size([10, 64, 108, 108])\n",
      "MAX POOL 2 torch.Size([10, 64, 54, 54])\n",
      "CONV 3 torch.Size([10, 128, 53, 53])\n",
      "MAX POOL 3 torch.Size([10, 128, 26, 26])\n",
      "CONV 4 torch.Size([10, 256, 26, 26])\n",
      "MAX POOL 4 torch.Size([10, 256, 13, 13])\n",
      "FLATTEN torch.Size([10, 43264])\n",
      "FC 1 torch.Size([10, 3000])\n",
      "FC 2 torch.Size([10, 136])\n"
     ]
    }
   ],
   "source": [
    "# train your network\n",
    "n_epochs = 1 # start small, and increase when you've decided on your model structure and hyperparams\n",
    "\n",
    "# this is a Workspaces-specific context manager to keep the connection\n",
    "# alive while training your model, not part of pytorch\n",
    "if not offline:\n",
    "    with active_session():\n",
    "        train_net(n_epochs)\n",
    "else:\n",
    "    train_net(n_epochs)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Test data\n",
    "\n",
    "See how your model performs on previously unseen, test data. We've already loaded and transformed this data, similar to the training data. Next, run your trained model on these images to see what kind of keypoints are produced. You should be able to see if your model is fitting each new face it sees, if the points are distributed randomly, or if the points have actually overfitted the training data and do not generalize."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# get a sample of test data again\n",
    "test_images, test_outputs, gt_pts = net_sample_output()\n",
    "\n",
    "print(test_images.data.size())\n",
    "print(test_outputs.data.size())\n",
    "print(gt_pts.size())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## TODO: visualize your test output\n",
    "# you can use the same function as before, by un-commenting the line below:\n",
    "\n",
    "visualize_output(test_images, test_outputs, gt_pts)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once you've found a good model (or two), save your model so you can load it and use it later!\n",
    "\n",
    "Save your models but please **delete any checkpoints and saved models before you submit your project** otherwise your workspace may be too large to submit."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## TODO: change the name to something uniqe for each new model\n",
    "model_dir = 'saved_models/'\n",
    "model_name = 'keypoints_model_1.pt'\n",
    "\n",
    "# after training, save your model parameters in the dir 'saved_models'\n",
    "torch.save(net.state_dict(), model_dir+model_name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After you've trained a well-performing model, answer the following questions so that we have some insight into your training and architecture selection process. Answering all questions is required to pass this project."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 1: What optimization and loss functions did you choose and why?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer**: For the loss function, Mean Squared Error Loss was used instead of Cross Entropy Loss because we were trying to get a predicted value to match a target value instead of generating a class score hence MSE Loss was better suited for the task.\n",
    "\n",
    "For the optimization function, Adam Optimizer was used as it seems to generate the best generalized results in comparison to RMSProp or SGD in general due to the use of momemtum I believe."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 2: What kind of network architecture did you start with and how did it change as you tried different architectures? Did you decide to add more convolutional layers or any layers to avoid overfitting the data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer**: I tried first to incorporate the NamishNet that was referenced in the paper Facial Key Points Detection using Deep Convolutional Neural Network - NaimishNet, link - https://arxiv.org/pdf/1710.00977.pdf\n",
    "\n",
    "My implementation was similar but not exactly the same as the input sizes of the images were different from the ones used in the paper. \n",
    "\n",
    "Net(\n",
    "\n",
    "  (conv1): Conv2d(1, 32, kernel_size=(4, 4), stride=(1, 1))\n",
    "  \n",
    "  (conv1_drop): Dropout(p=0.1)\n",
    "  \n",
    "  (conv2): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1))\n",
    "  \n",
    "  (conv2_drop): Dropout(p=0.2)\n",
    "  \n",
    "  (conv3): Conv2d(64, 128, kernel_size=(2, 2), stride=(1, 1))\n",
    "  \n",
    "  (conv3_drop): Dropout(p=0.3)\n",
    "  \n",
    "  (conv4): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))\n",
    "  \n",
    "  (conv4_drop): Dropout(p=0.4)\n",
    " \n",
    "  (fc1): Linear(in_features=43264, out_features=2000, bias=True)\n",
    "  \n",
    "  (fc1_drop): Dropout(p=0.5)\n",
    "  \n",
    "  (fc2): Linear(in_features=2000, out_features=1000, bias=True)\n",
    "  \n",
    "  (fc2_drop): Dropout(p=0.6)\n",
    "  \n",
    "  (fc3): Linear(in_features=1000, out_features=136, bias=True)\n",
    "    \n",
    ")\n",
    "\n",
    "I personally could not explore the full capacity of this network as I was unable to use GPU accelerated training on this notebook!!!! Considering the fact it was really deep and took eons to train plus I personally feel the large amounts of dropout that was used in the network lead to extremely slow training plus I felt that the dropout was used too frequently and show have simply been used more towards the end of the network. This network started with an average loss of 0.6085513532161713 which dropped to 0.267531256377697 by Batch 30 and leveled out to 0.2554633393883705 by Batch 340 at the end of the first epoch. This performance was not impressive.\n",
    "\n",
    "Hence I opted to construct my own network, that used less dropout and used it towards the end of the network, used batch normalization prior to using of dropout to improve regularization and drastically increase training speeds by making the network substantially smaller with generation of more lower level feature maps in the initial convolutions and less higher level feature maps towards the later convolutions and with one less fully connected layer. \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 3: How did you decide on the number of epochs and batch_size to train your model?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer**: write your answer here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature Visualization\n",
    "\n",
    "Sometimes, neural networks are thought of as a black box, given some input, they learn to produce some output. CNN's are actually learning to recognize a variety of spatial patterns and you can visualize what each convolutional layer has been trained to recognize by looking at the weights that make up each convolutional kernel and applying those one at a time to a sample image. This technique is called feature visualization and it's useful for understanding the inner workings of a CNN."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the cell below, you can see how to extract a single filter (by index) from your first convolutional layer. The filter should appear as a grayscale grid."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get the weights in the first conv layer, \"conv1\"\n",
    "# if necessary, change this to reflect the name of your first conv layer\n",
    "weights1 = net.conv1.weight.data\n",
    "\n",
    "w = weights1.numpy()\n",
    "\n",
    "filter_index = 0\n",
    "\n",
    "print(w[filter_index][0])\n",
    "print(w[filter_index][0].shape)\n",
    "\n",
    "# display the filter weights\n",
    "plt.imshow(w[filter_index][0], cmap='gray')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Feature maps\n",
    "\n",
    "Each CNN has at least one convolutional layer that is composed of stacked filters (also known as convolutional kernels). As a CNN trains, it learns what weights to include in it's convolutional kernels and when these kernels are applied to some input image, they produce a set of **feature maps**. So, feature maps are just sets of filtered images; they are the images produced by applying a convolutional kernel to an input image. These maps show us the features that the different layers of the neural network learn to extract. For example, you might imagine a convolutional kernel that detects the vertical edges of a face or another one that detects the corners of eyes. You can see what kind of features each of these kernels detects by applying them to an image. One such example is shown below; from the way it brings out the lines in an the image, you might characterize this as an edge detection filter.\n",
    "\n",
    "<img src='images/feature_map_ex.png' width=50% height=50%/>\n",
    "\n",
    "\n",
    "Next, choose a test image and filter it with one of the convolutional kernels in your trained CNN; look at the filtered output to get an idea what that particular kernel detects.\n",
    "\n",
    "### TODO: Filter an image to see the effect of a convolutional kernel\n",
    "---"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "##TODO: load in and display any image from the transformed test dataset\n",
    "\n",
    "## TODO: Using cv's filter2D function,\n",
    "## apply a specific set of filter weights (like the one displayed above) to the test image\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Question 4: Choose one filter from your trained CNN and apply it to a test image; what purpose do you think it plays? What kind of feature do you think it detects?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Answer**: (does it detect vertical lines or does it blur out noise, etc.) write your answer here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "## Moving on!\n",
    "\n",
    "Now that you've defined and trained your model (and saved the best model), you are ready to move on to the last notebook, which combines a face detector with your saved model to create a facial keypoint detection system that can predict the keypoints on *any* face in an image!"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:conda-ml-agents]",
   "language": "python",
   "name": "conda-env-conda-ml-agents-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
